**      CONTROL STRUCTURES

A basic Scala if statement looks like this:

if (a == b) doSomething()
You can also write that statement like this:

if (a == b) {
    doSomething()
}
The if/else construct looks like this:

if (a == b) {
    doSomething()
} else {
    doSomethingElse()
}
The complete Scala if/else-if/else expression looks like this:

if (test1) {
    doX()
} else if (test2) {
    doY()
} else {
    doZ()
}
if expressions always return a result
A great thing about the Scala if construct is that it always returns a result. 
You can ignore the result as we did in the previous examples, but a more common approach — especially in functional programming — is to assign the result to a variable:

val minValue = if (a < b) a else b
This is cool for several reasons, including the fact that it means that Scala doesn’t require a special “ternary” operator.

Aside: Expression-oriented programming
As a brief note about programming in general, when every expression you write returns a value, that style is referred to as expression-oriented programming, or EOP. This is an example of an expression:

val minValue = if (a < b) a else b
Conversely, lines of code that don’t return values are called statements, and they are used for their side-effects. For example, these lines of code don’t return values, so they are used for their side effects:

if (a == b) doSomething()
println("Hello")
The first example runs the doSomething method as a side effect when a is equal to b. The second example is used for the side effect of writing a string to STDOUT. As you learn more about Scala you’ll find yourself writing more expressions and fewer statements. The differences between expressions and statements will also become more apparent.


------------------------

***** FOR LOOPS

 In its most simple use, a Scala for loop can be used to iterate over the elements in a collection. For example, given a sequence of integers:

val nums = Seq(1,2,3)
you can loop over them and print out their values like this:

for (n <- nums) println(n)
This is what the result looks like in the Scala REPL:

scala> val nums = Seq(1,2,3)
nums: Seq[Int] = List(1, 2, 3)

scala> for (n <- nums) println(n)
1
2
3
That example uses a sequence of integers, which has the data type Seq[Int]. Here’s a list of strings which has the data type List[String]:

val people = List(
    "Bill", 
    "Candy", 
    "Karen", 
    "Leo", 
    "Regina"
)
You print its values using a for loop just like the previous example:

for (p <- people) println(p)
Seq and List are two types of linear collections. In Scala these collection classes are preferred over Array. (More on this later.)

The foreach method
For the purpose of iterating over a collection of elements and printing its contents you can also use the foreach method that’s available to Scala collections classes. For example, this is how you use foreach to print the previous list of strings:

people.foreach(println)
foreach is available on most collections classes, including sequences, maps, and sets.

Using for and foreach with Maps
You can also use for and foreach when working with a Scala Map (which is similar to a Java HashMap). For example, given this Map of movie names and ratings:

val ratings = Map(
    "Lady in the Water"  -> 3.0, 
    "Snakes on a Plane"  -> 4.0, 
    "You, Me and Dupree" -> 3.5
)
You can print the movie names and ratings using for like this:

for ((name,rating) <- ratings) println(s"Movie: $name, Rating: $rating")
Here’s what that looks like in the REPL:

scala> for ((name,rating) <- ratings) println(s"Movie: $name, Rating: $rating")
Movie: Lady in the Water, Rating: 3.0
Movie: Snakes on a Plane, Rating: 4.0
Movie: You, Me and Dupree, Rating: 3.5
In this example, name corresponds to each key in the map, and rating is the name that’s assigned to each value in the map.

You can also print the ratings with foreach like this:

ratings.foreach {
    case(movie, rating) => println(s"key: $movie, value: $rating")}
    
  ------------------------------------
  
  ****    FOR EXPRESSIONS
  
  
  If you recall what we wrote about Expression-Oriented Programming (EOP) and the difference between expressions and statements, you’ll notice that in the previous lesson we used the for keyword and foreach method as tools for side effects. We used them to print the values in the collections to STDOUT using println. Java has similar keywords, and many programmers used them for years without ever giving much thought to how they could be improved.

Once you start working with Scala you’ll see that in functional programming languages you can use more powerful “for expressions” in addition to “for loops.” In Scala, a for expression — which we’ll write as for-expression — is a different use of the for construct. While a for-loop is used for side effects (such as printing output), a for-expression is used to create new collections from existing collections.

For example, given this list of integers:

val nums = Seq(1,2,3)
You can create a new list of integers where all of the values are doubled, like this:

val doubledNums = for (n <- nums) yield n * 2
That expression can be read as, “For every number n in the list of numbers nums, double each value, and then assign all of the new values to the variable doubledNums.” This is what it looks like in the Scala REPL:

scala> val doubledNums = for (n <- nums) yield n * 2
doubledNums: Seq[Int] = List(2, 4, 6)
As the REPL output shows, the new list doubledNums contains these values:

List(2,4,6)
In summary, the result of the for-expression is that it creates a new variable named doubledNums whose values were created by doubling each value in the original list, nums.

Capitalizing a list of strings
You can use the same approach with a list of strings. For example, given this list of lowercase strings:

val names = List("adam", "david", "frank")
You can create a list of capitalized strings with this for-expression:

val ucNames = for (name <- names) yield name.capitalize
The REPL shows how this works:

scala> val ucNames = for (name <- names) yield name.capitalize
ucNames: List[String] = List(Adam, David, Frank)
Success! Each name in the new variable ucNames is capitalized.

The yield keyword
Notice that both of those for-expressions use the yield keyword:

val doubledNums = for (n <- nums) yield n * 2
                                  -----

val ucNames = for (name <- names) yield name.capitalize
                                  -----
Using yield after for is the “secret sauce” that says, “I want to yield a new collection from the existing collection that I’m iterating over in the for-expression, using the algorithm shown.”

Using a block of code after yield
The code after the yield expression can be as long as necessary to solve the current problem. For example, given a list of strings like this:

val names = List("_adam", "_david", "_frank")
Imagine that you want to create a new list that has the capitalized names of each person. To do that, you first need to remove the underscore character at the beginning of each name, and then capitalize each name. To remove the underscore from each name, you call drop(1) on each String. After you do that, you call the capitalize method on each string. Here’s how you can use a for-expression to solve this problem:

val capNames = for (name <- names) yield {
    val nameWithoutUnderscore = name.drop(1)
    val capName = nameWithoutUnderscore.capitalize
    capName
}
If you put that code in the REPL, you’ll see this result:

capNames: List[String] = List(Adam, David, Frank)
A shorter version of the solution
We show the verbose form of the solution in that example so you can see how to use multiple lines of code after yield. However, for this particular example you can also write the code like this, which is more of the Scala style:

val capNames = for (name <- names) yield name.drop(1).capitalize
You can also put curly braces around the algorithm, if you prefer:

val capNames = for (name <- names) yield { name.drop(1).capitalize }


----------------------------------------------------------------------

****       MATCH EXPRESSION

Aside: A quick look at Scala methods
Scala also makes it easy to use a match expression as the body of a method. We haven’t shown how to write Scala methods yet, so as a brief introduction, here’s a method named convertBooleanToStringMessage that takes a Boolean value and returns a String:

def convertBooleanToStringMessage(bool: Boolean): String = {
    if (bool) "true" else "false"        
}
Hopefully you can see how that method works, even though we won’t go into its details. These examples show how it works when you give it the Boolean values true and false:

scala> val answer = convertBooleanToStringMessage(true)
answer: String = true

scala> val answer = convertBooleanToStringMessage(false)
answer: String = false

Using a match expression as the body of a method
Now that you’ve seen an example of a Scala method, here’s a second example that works just like the previous one, taking a Boolean value as an input parameter and returning a String message. The big difference is that this method uses a match expression for the body of the method:

def convertBooleanToStringMessage(bool: Boolean): String = bool match {
    case true => "you said true"
    case false => "you said false"
}
The body of that method is just two case statements, one that matches true and another that matches false. Because those are the only possible Boolean values, there’s no need for a default case statement.

This is how you call that method and then print its result:

val result = convertBooleanToStringMessage(true)
println(result)
Using a match expression as the body of a method is also a common use.

Handling alternate cases
match expressions are extremely powerful, and we’ll demonstrate a few other things you can do with them.

match expressions let you handle multiple cases in a single case statement. To demonstrate this, imagine that you want to evaluate “boolean equality” like the Perl programming language handles it: a 0 or a blank string evaluates to false, and anything else evaluates to true. This is how you write a method using a match expression that evaluates to true and false in the manner described:

def isTrue(a: Any) = a match {
    case 0 | "" => false
    case _ => true
}
Because the input parameter a is defined to be the Any type — which is the root of all Scala classes, like Object in Java — this method works with any data type that’s passed in:

scala> isTrue(0)
res0: Boolean = false

scala> isTrue("")
res1: Boolean = false

scala> isTrue(1.1F)
res2: Boolean = true

scala> isTrue(new java.io.File("/etc/passwd"))
res3: Boolean = true
The key part of this solution is that this one case statement lets both 0 and the empty string evaluate to false:

case 0 | "" => false
Before we move on, here’s another example that shows many matches in each case statement:

val evenOrOdd = i match {
    case 1 | 3 | 5 | 7 | 9 => println("odd")
    case 2 | 4 | 6 | 8 | 10 => println("even")
    case _ => println("some other number")
}
Here’s another example that shows how to handle multiple strings in multiple case statements:

cmd match {
    case "start" | "go" => println("starting")
    case "stop" | "quit" | "exit" => println("stopping")
    case _ => println("doing nothing")
}
Using if expressions in case statements
Another great thing about match expressions is that you can use if expressions in case statements for powerful pattern matching. In this example the second and third case statements both use if expressions to match ranges of numbers:

count match {
    case 1 => println("one, a lonely number")
    case x if x == 2 || x == 3 => println("two's company, three's a crowd")
    case x if x > 3 => println("4+, that's a party")
    case _ => println("i'm guessing your number is zero or less")
}
Scala doesn’t require you to use parentheses in the if expressions, but you can use them if you think that makes them more readable:

count match {
    case 1 => println("one, a lonely number")
    case x if (x == 2 || x == 3) => println("two's company, three's a crowd")
    case x if (x > 3) => println("4+, that's a party")
    case _ => println("i'm guessing your number is zero or less")
}
You can also write the code on the right side of the => on multiple lines if you think is easier to read. Here’s one example:

count match {
    case 1 => 
        println("one, a lonely number")
    case x if x == 2 || x == 3 => 
        println("two's company, three's a crowd")
    case x if x > 3 => 
        println("4+, that's a party")
    case _ => 
        println("i'm guessing your number is zero or less")
}
Here’s a variation of that example that uses curly braces:

count match {
    case 1 => {
        println("one, a lonely number")
    }
    case x if x == 2 || x == 3 => {
        println("two's company, three's a crowd")
    }
    case x if x > 3 => {
        println("4+, that's a party")
    }
    case _ => {
        println("i'm guessing your number is zero or less")
    }
}
Here are a few other examples of how you can use if expressions in case statements. First, another example of how to match ranges of numbers:

i match {
  case a if 0 to 9 contains a => println("0-9 range: " + a)
  case b if 10 to 19 contains b => println("10-19 range: " + b)
  case c if 20 to 29 contains c => println("20-29 range: " + c)
  case _ => println("Hmmm...")
}
Lastly, this example shows how to reference class fields in if expressions:

stock match {
  case x if (x.symbol == "XYZ" && x.price < 20) => buy(x)
  case x if (x.symbol == "XYZ" && x.price > 50) => sell(x)
  case x => doNothing(x)
}
Even more
match expressions are very powerful, and there are even more things you can do with them, but hopefully these examples provide a good start towards using them.

--------------------------------------------------------------------


**** TRY/CATCH/FINALLY EXCEPTION


Like Java, Scala has a try/catch/finally construct to let you catch and manage exceptions. The main difference is that for consistency, Scala uses the same syntax that match expressions use: case statements to match the different possible exceptions that can occur.

A try/catch example
Here’s an example of Scala’s try/catch syntax. In this example, openAndReadAFile is a method that does what its name implies: it opens a file and reads the text in it, assigning the result to the variable named text:

var text = ""
try {
    text = openAndReadAFile(filename)
} catch {
    case e: FileNotFoundException => println("Couldn't find that file.")
    case e: IOException => println("Had an IOException trying to read that file")
}
Scala uses the java.io.* classes to work with files, so attempting to open and read a file can result in both a FileNotFoundException and an IOException. Those two exceptions are caught in the catch block of this example.

try, catch, and finally
The Scala try/catch syntax also lets you use a finally clause, which is typically used when you need to close a resource. Here’s an example of what that looks like:

try {
    // your scala code here
} 
catch {
    case foo: FooException => handleFooException(foo)
    case bar: BarException => handleBarException(bar)
    case _: Throwable => println("Got some other kind of Throwable exception")
} finally {
    // your scala code here, such as closing a database connection
    // or file handle
}
